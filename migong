/* 广度优先遍历 + 队列寻找最短路径 迷宫 */
//深度优先遍历 + 栈 寻找路径

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MaxSize 64
#define M 8
#define N 8

int mg[M+2][N+2] =
{
    {1,1,1,1,1,1,1,1,1,1},
    {1,0,0,1,0,0,0,1,0,1},
    {1,0,0,1,0,0,0,1,0,1},
    {1,0,0,0,0,1,1,0,0,1},
    {1,0,1,1,1,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,1},
    {1,0,1,0,0,0,1,0,0,1},
    {1,0,1,1,1,0,1,1,0,1},
    {1,1,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1},

};
int mg1[M+2][N+2] =
{
    {1,1,1,1,1,1,1,1,1,1},
    {1,0,0,1,0,0,0,1,0,1},
    {1,0,0,1,0,0,0,1,0,1},
    {1,0,0,0,0,1,1,0,0,1},
    {1,0,1,1,1,0,0,0,0,1},
    {1,0,0,0,1,0,0,0,0,1},
    {1,0,1,0,0,0,1,0,0,1},
    {1,0,1,1,1,0,1,1,0,1},
    {1,1,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1},

};





typedef struct
{
    int i,j;
    int pre;

} Box;

typedef struct
{
    Box data[MaxSize];
    int front,rear;
} QuType;

void print(QuType qu,int front);

//广度优先遍历加队列
bool mgpath1(int xi,int yi,int xe,int ye)
{
    int i,j,find=0,di;
    QuType qu;
    qu.front = qu.rear = -1;
    qu.rear++;
    qu.data[qu.rear].i = xi; qu.data[qu.rear].j = yi;   //xi yi 进队
    qu.data[qu.rear].pre = -1;
    mg[xi][yi] = -1;
    while(qu.front!=qu.rear&&!find)
    {
        qu.front++;
        i=qu.data[qu.front].i; j = qu.data[qu.front].j;
        if (i==xe&&j==ye)
        {
            //输出队列中所有元素
            int size = qu.front;
            while(qu.front != 0)
            {
                printf("\t(%d,%d) \t%d \n",qu.data[qu.front].i,qu.data[qu.front].j,qu.data[qu.front].pre);
                qu.front--;
            }

            qu.front = size;

            find = 1;
            print(qu,qu.front);
            return true;
        }
        for (di=0;di<4;di++)
        {
            switch(di)
            {
                case 0:i = qu.data[qu.front].i-1;j = qu.data[qu.front].j;break;
                case 1:i = qu.data[qu.front].i;j = qu.data[qu.front].j+1;break;
                case 2:i = qu.data[qu.front].i+1;j = qu.data[qu.front].j;break;
                case 3:i = qu.data[qu.front].i;j = qu.data[qu.front].j-1;break;
            }


            if(mg[i][j]==0)
            {

                    qu.rear++;
                    qu.data[qu.rear].i = i,qu.data[qu.rear].j = j;
                    qu.data[qu.rear].pre = qu.front;  //指向路径中上一个方块的下表
                    mg[i][j] = -1; //赋值为-1 避免重复搜索
                }
            }
        }

        return false;



}

void print(QuType qu,int front)




{
    int k = front,j,ns=0;
    printf("\n");
    do
    {
        j = k;
        k = qu.data[k].pre;
        qu.data[j].pre = -1;
    }while(k!=0);
    printf("该迷宫路径如下:\n");
    k=0;
    while(k<MaxSize)
    {
        if(qu.data[k].pre == -1)
        {
            ns++;
            printf("\t(%d,%d)",qu.data[k].i,qu.data[k].j);
            if(ns%5==0)printf("\n");

        }
        k++;
    }
    printf("\n");
}



typedef struct
{
    int i;
    int j;
    int di;   //下一个可走的相邻方块号
}BoxStack;
typedef struct
{
    BoxStack data[MaxSize];
    int top;
}StType;

bool mgpathStack(int xi,int yi,int xe,int ye)
{
    int i,j,k,di,find;
    StType st;
    st.top = -1; //初始化栈
    st.top++;   //初始方块进栈
    st.data[st.top].i = xi;
    st.data[st.top].j = yi;
    st.data[st.top].di = -1;
    mg1[xi][yi] = -1;        //表示不可走
    while(st.top > -1)
    {
        i = st.data[st.top].i;
        j = st.data[st.top].j;
        di = st.data[st.top].di;         //取栈顶方块
        if(i==xe&&j==ye)
        {
            printf("该迷宫路径如下:\n");
            for(k=0;k<=st.top;k++)
            {
                printf("\t(%d,%d)",st.data[k].i,st.data[k].j);
                if((k+1)%5==0)printf("\n"); //每输出五个换行
            }
            printf("\n");return true;
        }

        find = 0;
        while(di<4&&find == 0)
        {
            di++;
            switch(di)
            {
                case 0: i = st.data[st.top].i-1; j=st.data[st.top].j;    break;
                case 1: i = st.data[st.top].i;   j=st.data[st.top].j+1;  break;
                case 2: i = st.data[st.top].i+1; j=st.data[st.top].j;    break;
                case 3: i = st.data[st.top].i;   j=st.data[st.top].j-1;  break;

            }
            if(mg1[i][j]==0) find = 1;
           // printf("xxx\n %d\n",di);
           // printf("%d,%d \n",mg[i][j],di);

        }
        if(find ==1)
        {

        //printf("xxx");
            st.data[st.top].di = di;
            st.top++;
            st.data[st.top].i = i;st.data[st.top].j = j;

            st.data[st.top].di = -1;
            mg1[i][j] = -1;      //避免重复方块
 printf("前进:\t(%d,%d)\n",st.data[st.top].i,st.data[st.top].j);

        }
        else
        {
            mg1[st.data[st.top].i][st.data[st.top].j] = 0;
            //让该位置变为其他路径可走方块
            st.top--; //退栈
 printf("\t后退:\t(%d,%d)\n",st.data[st.top].i,st.data[st.top].j);
        }
    }
    return false;
}












void main()
{

 printf("----------------------------广度优先遍历----------------------------------------\n");

    if(!mgpath1(1,1,M,N)) printf("该迷宫没有解");


    printf("--------------------------利用栈------------------------------------------\n");
    if(!mgpathStack(1,1,M,N))printf("该迷宫没有解");
}
